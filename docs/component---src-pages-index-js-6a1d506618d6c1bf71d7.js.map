{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_2__","IndexPage","_ref","allHospitals","data","allGeoFeature","edges","map","edge","node","a","createElement","hospital","to","featureFields","ID","NAME","StaticQuery","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","loader","enqueue","StaticQueryContext","React","createContext","StaticQueryDataRenderer","staticQueryData","render","finalData","Fragment","props","children","Consumer","m","module","exports","require","default","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","Header","siteTitle","react_default","style","background","marginBottom","margin","maxWidth","padding","gatsby_browser_entry","color","textDecoration","defaultProps","Layout","header","site","siteMetadata","title","paddingTop","Date","getFullYear","href","_755544856"],"mappings":"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","file":"component---src-pages-index-js-6a1d506618d6c1bf71d7.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n\nimport Layout from '../components/layout'\n\nconst IndexPage = ({data}) => {\n\n  const allHospitals = data.allGeoFeature.edges.map(\n    edge => edge.node\n  )\n\n  return (\n    <Layout>\n      <p>Click on the name of a hospital below for more information and to see it's location on a map</p>\n      <ul>\n        {\n          allHospitals.map(hospital => (<li><Link to={`/hospital/${hospital.featureFields.ID}`}>{hospital.featureFields.NAME}</Link></li>))\n        }\n      </ul>\n    </Layout>\n  );\n}\n\n\n\nexport const query = graphql`\nquery{\n   allGeoFeature {\n    edges {\n      node {\n        id\n        featureFields {\n          NAME\n          ID\n        }\n      }\n    }\n  }\n}\n`\n\nexport default IndexPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `#5b6c5d`,\n      marginBottom: `0`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: `My Gatsby Site`,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            paddingTop: 0,\n          }}\n        >\n        <main>{children}</main>\n        </div>\n          <footer style={{\n            padding: `0.5px 1rem`,\n            color: `#5b6c5d`,\n            }}>\n            Â© {new Date().getFullYear()} <a href=\"https://www.andrewl.net\">Andrew Larcombe</a>, built with\n            {` `}\n            <a href=\"https://www.gatsbyjs.org\">Gatsby</a> using Open Data from <a href=\"http://lle.gov.wales/catalogue/item/HealthServices/?lang=en\">Lle Geo-Portal</a>\n          </footer>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}