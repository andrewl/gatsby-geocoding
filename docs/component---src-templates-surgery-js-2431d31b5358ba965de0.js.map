{"version":3,"sources":["webpack:///./src/components/leafletmap.js","webpack:///./src/templates/surgery.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["LeafletMap","render","react_default","a","createElement","Map","center","this","props","position","zoom","TileLayer","url","attribution","markerText","Marker","Popup","React","Component","defaultProps","__webpack_require__","d","__webpack_exports__","query","SurgeryTemplate","_ref","surgery","data","allEpraccurCsv","edges","node","fields","undefined","geocoderGeometry","lat","lng","address","field5","field6","field7","field8","field9","field10","filter","el","join","layout","field2","window","components_leafletmap","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","loader","enqueue","StaticQueryContext","createContext","StaticQueryDataRenderer","staticQueryData","finalData","Fragment","children","Consumer","m","module","exports","require","default","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","Header","siteTitle","style","background","marginBottom","margin","maxWidth","padding","gatsby_browser_entry","to","color","textDecoration","Layout","header","site","siteMetadata","title","paddingTop","Date","getFullYear","href","_755544856"],"mappings":"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","file":"component---src-templates-surgery-js-2431d31b5358ba965de0.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet'\nimport './leafletmap.css'\n\n\nclass LeafletMap extends React.Component {\n\n  static propTypes = {\n    /** Latitude and Longitude of the map centre in an array, eg [51, -1] **/\n    position: PropTypes.array,\n\n    /** Initial zoom level for the map (default 13) **/\n    zoom: PropTypes.number,\n\n    /** If set, will display a marker, which when clicked will display this text **/\n    markerText: PropTypes.string\n  }\n\n  static defaultProps = {\n    position: [51, -1],\n    zoom: 13,\n    markerText: \"\"\n  }\n\n  render() {\n\n      return (\n        <Map center={this.props.position} zoom={this.props.zoom}>\n          <TileLayer\n            url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\n            attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n          />\n          {this.props.markerText !== \"\" &&\n          <Marker position={this.props.position}>\n            <Popup>{this.props.markerText}</Popup>\n          </Marker>\n          }\n        </Map>\n      );\n  }\n}\n\nexport default LeafletMap\n","import { graphql } from \"gatsby\"\nimport React from \"react\"\nimport Layout from '../components/layout'\nimport LeafletMap from '../components/leafletmap'\n\nconst SurgeryTemplate = ({ data }) => {\n  let surgery = data.allEpraccurCsv.edges[0].node;\n  let position = null\n  if (typeof surgery.fields !== 'undefined' && typeof surgery.fields.geocoderGeometry != undefined) {\n    position = [surgery.fields.geocoderGeometry.lat, surgery.fields.geocoderGeometry.lng];\n  }\n  let address = [surgery.field5, surgery.field6, surgery.field7, surgery.field8, surgery.field9, surgery.field10].filter(function(el) { return el !== \"\" }).join(\", \");\n  return (\n    <Layout>\n    <h2>{surgery.field2}</h2>\n    <p>{address}</p>\n    {typeof window !== 'undefined' && position &&\n        <LeafletMap\n          position={position}\n          zoom={12}\n          markerText={surgery.field2}\n        />\n    }\n  </Layout>\n  );\n}\n\nexport default SurgeryTemplate;\n\nexport const query = graphql`\n\nquery($id: String!) {\n  allEpraccurCsv(filter: {field1: {eq: $id}}) {\n    edges {\n      node {\n        field1\n        field2\n        field5\n        field6\n        field7\n        field8\n        field9\n        field10\n        fields {\n          geocoderGeometry {\n            lat\n            lng\n          }\n        }\n      }\n    }\n  }\n}\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `#5b6c5d`,\n      marginBottom: `0`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: `My Gatsby Site`,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            paddingTop: 0,\n          }}\n        >\n        <main>{children}</main>\n        </div>\n          <footer style={{\n            padding: `0.5px 1rem`,\n            color: `#5b6c5d`,\n            }}>\n            © {new Date().getFullYear()} <a href=\"https://www.andrewl.net\">Andrew Larcombe</a>, built with\n            {` `}\n            <a href=\"https://www.gatsbyjs.org\">Gatsby</a> using Open Data from <a href=\"https://digital.nhs.uk/services/organisation-data-service/data-downloads/gp-and-gp-practice-related-data\">NHS Digital</a>\n          </footer>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}